import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import { Card } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { 
  FileText, 
  Download, 
  Share2, 
  RefreshCw, 
  Clock, 
  Eye,
  Edit,
  CheckCircle2,
  AlertCircle,
  BookOpen,
  Code,
  Users,
  Settings,
  Archive,
  Plus,
  Search
} from 'lucide-react';
import { cn } from '../ui/utils';
import { Agent, AgentInteraction, LiveDocumentation } from '../../types/multi-agent-orchestration';
import { DOCUMENTATION_TEMPLATES } from '../../constants/multi-agent-orchestration';

interface LiveDocumentationSystemProps {
  projectId: string;
  agents: Agent[];
  interactions: AgentInteraction[];
}

export function LiveDocumentationSystem({
  projectId,
  agents,
  interactions
}: LiveDocumentationSystemProps) {
  const [documents, setDocuments] = useState<LiveDocumentation[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedDoc, setSelectedDoc] = useState<string>('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<string>('all');
  const [autoUpdateEnabled, setAutoUpdateEnabled] = useState(true);

  useEffect(() => {
    generateInitialDocuments();
    
    if (autoUpdateEnabled) {
      const interval = setInterval(updateDocuments, 30000);
      return () => clearInterval(interval);
    }
  }, [projectId, agents, interactions, autoUpdateEnabled]);

  const generateInitialDocuments = async () => {
    setIsGenerating(true);
    
    // Simulate document generation
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const initialDocs: LiveDocumentation[] = [
      {
        id: 'tech-specs-1',
        projectId,
        type: 'technical_specs',
        title: 'Multi-Agent System Architecture',
        content: generateTechnicalSpecs(),
        lastUpdated: new Date(),
        updatedBy: 'system',
        version: 1,
        tags: ['architecture', 'agents', 'system-design'],
        status: 'published',
        autoGenerated: true
      },
      {
        id: 'user-stories-1',
        projectId,
        type: 'user_stories',
        title: 'Agent Collaboration User Stories',
        content: generateUserStories(),
        lastUpdated: new Date(),
        updatedBy: 'agent-product_manager',
        version: 2,
        tags: ['requirements', 'user-experience', 'collaboration'],
        status: 'published',
        autoGenerated: true
      },
      {
        id: 'decision-log-1',
        projectId,
        type: 'decision_log',
        title: 'Architecture Decision Records',
        content: generateDecisionLog(),
        lastUpdated: new Date(),
        updatedBy: 'agent-visionary',
        version: 1,
        tags: ['decisions', 'architecture', 'rationale'],
        status: 'approved',
        autoGenerated: true
      },
      {
        id: 'api-docs-1',
        projectId,
        type: 'api_docs',
        title: 'Agent Communication API',
        content: generateApiDocs(),
        lastUpdated: new Date(),
        updatedBy: 'agent-backend_developer',
        version: 3,
        tags: ['api', 'communication', 'endpoints'],
        status: 'published',
        autoGenerated: true
      }
    ];
    
    setDocuments(initialDocs);
    setIsGenerating(false);
  };

  const updateDocuments = async () => {
    // Simulate real-time updates based on agent interactions
    setDocuments(prev => prev.map(doc => ({
      ...doc,
      lastUpdated: new Date(),
      version: doc.version + 1
    })));
  };

  const generateTechnicalSpecs = () => `
# Multi-Agent Orchestration System

## Overview
The Multi-Agent Orchestration System coordinates 11 specialized AI agents to collaborate on complex projects with real-time monitoring and optimization.

## System Architecture

### Core Components
- **LiveCollaborationCanvas**: Visual workspace for agent interactions
- **PredictiveFailureDetection**: AI-powered risk analysis system
- **VoiceCommandInterface**: Natural language agent control
- **AgentPersonalitySystem**: Emotional intelligence and behavior modeling

### Agent Types
${agents.map(agent => `- **${agent.name}**: ${agent.role} - ${agent.capabilities.join(', ')}`).join('\n')}

### Communication Protocols
- WebSocket-based real-time updates
- Event-driven interaction system
- Conflict resolution mechanisms
- Performance optimization algorithms

## Technical Stack
- **Frontend**: React, TypeScript, Motion/React
- **Backend**: Node.js, WebSocket
- **AI Models**: GPT-4, Claude, Gemini integration
- **Monitoring**: Real-time metrics and analytics

Last updated by: System AI • ${new Date().toLocaleString()}
`;

  const generateUserStories = () => `
# Agent Collaboration User Stories

## Epic: Multi-Agent Coordination

### Story 1: Visual Agent Monitoring
**As a** project manager
**I want to** see all agents and their current status on a visual canvas
**So that** I can understand team coordination at a glance

**Acceptance Criteria:**
- Display all 11 agents with real-time status indicators
- Show agent connections and collaboration patterns
- Provide hover details for each agent's current task
- Update status in real-time without manual refresh

### Story 2: Voice Command Control
**As a** team lead
**I want to** control agents using voice commands
**So that** I can manage the system hands-free during meetings

**Acceptance Criteria:**
- Recognize natural language commands
- Provide voice feedback for command confirmation
- Support commands for status checks, handoffs, and progress updates
- Maintain 85%+ accuracy in command recognition

### Story 3: Predictive Risk Management
**As a** project stakeholder
**I want to** receive early warnings about potential project risks
**So that** I can take preventive action before issues become critical

**Acceptance Criteria:**
- Analyze agent behavior patterns for risk indicators
- Generate risk predictions with confidence scores
- Provide actionable mitigation strategies
- Update risk assessments in real-time

Last updated by: Agent Product Manager • ${new Date().toLocaleString()}
`;

  const generateDecisionLog = () => `
# Architecture Decision Records

## ADR-001: Multi-Agent Communication Pattern
**Date:** ${new Date().toLocaleDateString()}
**Status:** Approved
**Deciders:** Visionary Agent, Backend Developer Agent

### Context
Need to establish communication patterns between 11 different AI agents with varying capabilities and response times.

### Decision
Implement event-driven architecture with WebSocket connections for real-time updates and REST APIs for persistent operations.

### Consequences
- **Positive:** Real-time collaboration, scalable communication
- **Negative:** Increased complexity, potential message overhead
- **Mitigation:** Implement message queuing and connection pooling

## ADR-002: Agent Personality System
**Date:** ${new Date().toLocaleDateString()}
**Status:** Approved
**Deciders:** UX Designer Agent, Product Manager Agent

### Context
Agents need distinct personalities to avoid uncanny valley effect and improve user trust.

### Decision
Implement comprehensive personality profiles with traits, communication styles, and stress responses.

### Consequences
- **Positive:** More human-like interactions, better user engagement
- **Negative:** Increased system complexity
- **Mitigation:** Use configuration-driven personality system

Last updated by: Agent Visionary • ${new Date().toLocaleString()}
`;

  const generateApiDocs = () => `
# Agent Communication API Reference

## Base URL
\`https://api.flashfusion.com/agents/v1\`

## Authentication
All API endpoints require authentication via Bearer token in the Authorization header.

## Endpoints

### GET /agents
Get list of all agents and their current status.

**Response:**
\`\`\`json
{
  "agents": [
    {
      "id": "agent-visionary",
      "name": "Visionary",
      "status": "active",
      "workload": 65,
      "efficiency": 87,
      "currentTask": "Strategic planning review"
    }
  ]
}
\`\`\`

### POST /agents/{agentId}/tasks
Assign a new task to a specific agent.

**Request Body:**
\`\`\`json
{
  "task": "Review user interface designs",
  "priority": "high",
  "deadline": "2024-01-15T10:00:00Z"
}
\`\`\`

### GET /interactions
Get recent agent interactions and handoffs.

**Response:**
\`\`\`json
{
  "interactions": [
    {
      "id": "int-123",
      "fromAgent": "agent-ui_designer", 
      "toAgent": "agent-frontend_developer",
      "type": "handoff",
      "status": "completed",
      "timestamp": "2024-01-15T09:30:00Z"
    }
  ]
}
\`\`\`

### WebSocket Events
Connect to \`wss://api.flashfusion.com/agents/ws\` for real-time updates.

**Event Types:**
- \`agent.status.changed\`
- \`interaction.created\`
- \`risk.detected\`
- \`task.completed\`

Last updated by: Agent Backend Developer • ${new Date().toLocaleString()}
`;

  const getDocumentIcon = (type: string) => {
    switch (type) {
      case 'technical_specs': return <Code className="h-4 w-4" />;
      case 'user_stories': return <Users className="h-4 w-4" />;
      case 'decision_log': return <CheckCircle2 className="h-4 w-4" />;
      case 'api_docs': return <BookOpen className="h-4 w-4" />;
      default: return <FileText className="h-4 w-4" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'published': return 'text-green-600 bg-green-100';
      case 'approved': return 'text-blue-600 bg-blue-100';
      case 'review': return 'text-yellow-600 bg-yellow-100';
      case 'draft': return 'text-gray-600 bg-gray-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const filteredDocuments = documents
    .filter(doc => filterType === 'all' || doc.type === filterType)
    .filter(doc => 
      doc.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      doc.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
    );

  const handleGenerateDocument = async (type: string) => {
    setIsGenerating(true);
    
    // Simulate AI generation
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const newDoc: LiveDocumentation = {
      id: `doc-${Date.now()}`,
      projectId,
      type: type as any,
      title: `Generated ${type.replace('_', ' ')} Document`,
      content: `# Generated ${type}\n\nThis document was automatically generated based on current agent interactions and project state.\n\nLast updated: ${new Date().toLocaleString()}`,
      lastUpdated: new Date(),
      updatedBy: 'system',
      version: 1,
      tags: ['generated', type],
      status: 'draft',
      autoGenerated: true
    };
    
    setDocuments(prev => [newDoc, ...prev]);
    setIsGenerating(false);
  };

  const exportDocument = (doc: LiveDocumentation) => {
    const blob = new Blob([doc.content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${doc.title.replace(/\s+/g, '-')}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Header Controls */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Live Documentation</h2>
          <p className="text-muted-foreground">
            Auto-generated and continuously updated project documentation
          </p>
        </div>
        
        <div className="flex items-center gap-2">
          <div className="flex items-center gap-2">
            <label className="text-sm">Auto-update</label>
            <Button
              variant={autoUpdateEnabled ? "default" : "outline"}
              size="sm"
              onClick={() => setAutoUpdateEnabled(!autoUpdateEnabled)}
            >
              {autoUpdateEnabled ? <CheckCircle2 className="h-4 w-4" /> : <AlertCircle className="h-4 w-4" />}
            </Button>
          </div>
          
          <Button
            onClick={() => handleGenerateDocument('technical_specs')}
            disabled={isGenerating}
            className="flex items-center gap-2"
          >
            <Plus className="h-4 w-4" />
            Generate Doc
          </Button>
        </div>
      </div>

      {/* Search and Filter */}
      <div className="flex items-center gap-4">
        <div className="relative flex-1 max-w-sm">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <input
            type="text"
            placeholder="Search documents..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10 pr-4 py-2 w-full bg-card border border-border rounded-md text-sm"
          />
        </div>
        
        <select
          value={filterType}
          onChange={(e) => setFilterType(e.target.value)}
          className="bg-card border border-border rounded-md px-3 py-2 text-sm"
        >
          <option value="all">All Types</option>
          <option value="technical_specs">Technical Specs</option>
          <option value="user_stories">User Stories</option>
          <option value="decision_log">Decision Log</option>
          <option value="api_docs">API Docs</option>
        </select>
      </div>

      {/* Generation Status */}
      <AnimatePresence>
        {isGenerating && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
          >
            <Card className="p-4 border-primary/50 bg-primary/5">
              <div className="flex items-center gap-3">
                <div className="animate-spin rounded-full h-5 w-5 border-2 border-primary border-t-transparent" />
                <span className="font-medium">AI is generating documentation...</span>
              </div>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Documents Grid */}
      <div className="grid gap-4">
        {filteredDocuments.map((doc, index) => (
          <motion.div
            key={doc.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <Card className="p-4 hover:shadow-lg transition-all duration-300">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-start gap-3">
                  <div className="p-2 rounded-lg bg-primary/10">
                    {getDocumentIcon(doc.type)}
                  </div>
                  <div>
                    <h3 className="font-semibold">{doc.title}</h3>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge className={cn("text-xs", getStatusColor(doc.status))}>
                        {doc.status}
                      </Badge>
                      <span className="text-xs text-muted-foreground">
                        v{doc.version}
                      </span>
                      {doc.autoGenerated && (
                        <Badge variant="secondary" className="text-xs">
                          Auto-generated
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setSelectedDoc(selectedDoc === doc.id ? '' : doc.id)}
                  >
                    <Eye className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => exportDocument(doc)}
                  >
                    <Download className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                  >
                    <Share2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>

              <div className="flex flex-wrap gap-1 mb-3">
                {doc.tags.map(tag => (
                  <Badge key={tag} variant="outline" className="text-xs">
                    {tag}
                  </Badge>
                ))}
              </div>

              <div className="flex items-center gap-4 text-sm text-muted-foreground">
                <div className="flex items-center gap-1">
                  <Clock className="h-3 w-3" />
                  {doc.lastUpdated.toLocaleString()}
                </div>
                <div className="flex items-center gap-1">
                  <Edit className="h-3 w-3" />
                  {doc.updatedBy.replace('agent-', '')}
                </div>
              </div>

              {/* Document Content */}
              <AnimatePresence>
                {selectedDoc === doc.id && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="mt-4 pt-4 border-t border-border"
                  >
                    <div className="bg-muted/30 rounded-lg p-4 max-h-96 overflow-y-auto">
                      <pre className="whitespace-pre-wrap text-sm">
                        {doc.content}
                      </pre>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </Card>
          </motion.div>
        ))}
      </div>

      {/* Empty State */}
      {filteredDocuments.length === 0 && !isGenerating && (
        <Card className="p-12">
          <div className="text-center space-y-4">
            <FileText className="h-12 w-12 text-muted-foreground mx-auto" />
            <div>
              <h3 className="font-semibold text-lg">No Documents Found</h3>
              <p className="text-muted-foreground">
                {searchTerm ? 'Try adjusting your search terms' : 'Generate your first document to get started'}
              </p>
            </div>
            <Button onClick={generateInitialDocuments} className="mt-4">
              Generate Initial Documentation
            </Button>
          </div>
        </Card>
      )}
    </div>
  );
}