/**
 * Documentation generators (README, deployment guides, architecture docs, etc.)
 */

import type { GeneratedApp, EnhancedDownloadOptions } from './types';

/**
 * Generate comprehensive README.md
 */
export function generateProjectReadme(app: GeneratedApp): string {
  return `# ${app.name}

${app.description}

## 🚀 Quick Start

### Prerequisites
- Node.js 18+
- npm 8+
- Docker (optional)

### Option 1: Docker (Recommended)
\`\`\`bash
# Clone and setup
git clone <your-repo>
cd ${app.name.toLowerCase().replace(/\s+/g, '-')}

# Start with Docker
docker-compose up -d

# Access the application
# Frontend: http://localhost:3000
# Backend: http://localhost:3001
\`\`\`

### Option 2: Local Development
\`\`\`bash
# Install dependencies for all workspaces
npm run setup

# Start development servers
npm run dev

# Or start individually
npm run dev:frontend  # Frontend on http://localhost:3000
npm run dev:backend   # Backend on http://localhost:3001
\`\`\`

## 🏗️ Architecture

This is a full-stack application with the following architecture:

- **Frontend**: ${app.stack.frontend} with TypeScript
- **Backend**: ${app.stack.backend} with Express
- **Database**: ${app.stack.database}
- **Authentication**: ${app.stack.auth}
- **Deployment**: ${app.stack.deployment}

## ✨ Features

${app.features.map((feature) => `- ✅ ${feature}`).join('\n')}

## 📁 Project Structure

\`\`\`
${app.name.toLowerCase().replace(/\s+/g, '-')}/
├── frontend/              # React application
│   ├── src/
│   │   ├── components/   # React components
│   │   ├── pages/        # Application pages
│   │   ├── hooks/        # Custom hooks
│   │   ├── services/     # API services
│   │   └── utils/        # Utilities
│   ├── public/           # Static assets
│   └── package.json
├── backend/               # Node.js API server
│   ├── src/
│   │   ├── routes/      # API routes
│   │   ├── middleware/  # Express middleware
│   │   ├── models/      # Database models
│   │   ├── services/    # Business logic
│   │   └── utils/       # Utilities
│   └── package.json
├── database/              # Database schema and migrations
├── docker-compose.yml     # Docker configuration
├── README.md             # This file
└── package.json          # Root package.json
\`\`\`

## 🛠️ Available Scripts

### Root Level
- \`npm run dev\` - Start both frontend and backend in development mode
- \`npm run build\` - Build both applications for production
- \`npm run test\` - Run tests for both applications
- \`npm run docker:dev\` - Start with Docker in development mode

### Frontend
- \`npm run dev:frontend\` - Start frontend development server
- \`npm run build:frontend\` - Build frontend for production
- \`npm run test:frontend\` - Run frontend tests

### Backend
- \`npm run dev:backend\` - Start backend development server
- \`npm run build:backend\` - Build backend for production
- \`npm run test:backend\` - Run backend tests

## 🌐 API Documentation

The backend provides the following endpoints:

${app.endpoints.map((endpoint) => `- \`${endpoint.method} ${endpoint.path}\` - ${endpoint.description}`).join('\n')}

## 🔧 Environment Configuration

1. Copy environment template:
\`\`\`bash
cp .env.example .env
\`\`\`

2. Update the following variables:
- \`DATABASE_URL\` - Your database connection string
- \`JWT_SECRET\` - Secret for JWT tokens
- \`API_PORT\` - Backend server port (default: 3001)

## 🚀 Deployment

See [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed deployment instructions.

### Quick Deploy Options:

#### Vercel (Frontend + Serverless Backend)
\`\`\`bash
cd frontend
vercel --prod
\`\`\`

#### Railway (Full-Stack)
\`\`\`bash
railway login
railway link
railway up
\`\`\`

#### Docker Production
\`\`\`bash
docker-compose -f docker-compose.prod.yml up -d
\`\`\`

## 🧪 Testing

\`\`\`bash
# Run all tests
npm test

# Run with coverage
npm run test:coverage

# Run in watch mode
npm run test:watch
\`\`\`

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (\`git checkout -b feature/amazing-feature\`)
3. Commit your changes (\`git commit -m 'Add some amazing feature'\`)
4. Push to the branch (\`git push origin feature/amazing-feature\`)
5. Open a Pull Request

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🎯 Generated by FlashFusion

This project was generated using [FlashFusion](https://flashfusion.dev) - The AI-powered full-stack development platform.

### Generated Configuration
- **Framework**: ${app.stack.frontend}
- **Backend**: ${app.stack.backend}
- **Database**: ${app.stack.database}
- **Features**: ${app.features.join(', ')}
- **Generated**: ${new Date().toLocaleDateString()}

Need help? Check out our [documentation](https://docs.flashfusion.dev) or join our [community](https://discord.gg/flashfusion).
`;
}

/**
 * Generate enhanced README with additional details
 */
export function generateEnhancedReadme(
  app: GeneratedApp,
  options: EnhancedDownloadOptions
): string {
  const branding = options.customBranding;
  const projectName = app.name;
  const timestamp = new Date().toLocaleDateString();

  return `# ${projectName}

${app.description}

${branding ? `*Generated for ${branding.companyName || 'Your Organization'}*` : ''}

## 🚀 Quick Start

### Prerequisites
- Node.js 18 or later
- Docker and Docker Compose (recommended)
- PostgreSQL (if not using Docker)

### Installation

\`\`\`bash
# Clone the repository
git clone <your-repository-url>
cd ${app.name.toLowerCase().replace(/\s+/g, '-')}

# Install dependencies for all services
npm run setup

# Start the application
npm run dev
\`\`\`

## 🏗️ Architecture

This application follows a modern full-stack architecture:

- **Frontend**: ${app.stack.frontend} with TypeScript and Tailwind CSS
- **Backend**: ${app.stack.backend} with Express and TypeScript
- **Database**: ${app.stack.database} with Prisma ORM
- **Authentication**: ${app.stack.auth}
- **Deployment**: Optimized for ${app.stack.deployment}

## ✨ Features

${app.features.map((feature) => `- ✅ ${feature}`).join('\n')}

## 📁 Project Structure

\`\`\`
${projectName.toLowerCase().replace(/\s+/g, '-')}/
├── frontend/                 # React/Next.js application
│   ├── src/
│   │   ├── components/      # Reusable UI components
│   │   ├── pages/           # Application pages/routes
│   │   ├── hooks/           # Custom React hooks
│   │   ├── services/        # API service layer
│   │   └── utils/           # Utility functions
│   ├── public/              # Static assets
│   └── package.json
├── backend/                 # Node.js API server
│   ├── src/
│   │   ├── routes/         # Express routes
│   │   ├── controllers/    # Route controllers
│   │   ├── middleware/     # Express middleware
│   │   ├── models/         # Database models
│   │   ├── services/       # Business logic
│   │   └── utils/          # Utility functions
│   └── package.json
├── database/               # Database schema and migrations
│   ├── migrations/         # Database migrations
│   ├── seeds/             # Database seed files
│   └── schema.sql         # Database schema
├── docs/                  # Additional documentation
├── tests/                 # Test files
├── .github/               # GitHub workflows and templates
├── docker-compose.yml     # Docker development setup
├── docker-compose.prod.yml # Docker production setup
└── README.md             # This file
\`\`\`

## 🛠️ Development

### Available Scripts

\`\`\`bash
# Development
npm run dev              # Start all services in development mode
npm run dev:frontend     # Start only frontend
npm run dev:backend      # Start only backend

# Building
npm run build            # Build all services for production
npm run build:frontend   # Build frontend only
npm run build:backend    # Build backend only

# Testing
npm test                 # Run all tests
npm run test:frontend    # Run frontend tests
npm run test:backend     # Run backend tests
npm run test:e2e         # Run end-to-end tests

# Database
npm run db:migrate       # Run database migrations
npm run db:seed          # Seed database with sample data
npm run db:reset         # Reset database (destructive)

# Docker
npm run docker:dev       # Start with Docker (development)
npm run docker:prod      # Start with Docker (production)
npm run docker:build     # Build Docker images
npm run docker:down      # Stop Docker containers
\`\`\`

## 🔧 Configuration

### Environment Variables

Copy the environment template and configure your settings:

\`\`\`bash
cp .env.example .env
\`\`\`

Key variables to configure:
- \`DATABASE_URL\` - Your database connection string
- \`JWT_SECRET\` - Secret for JWT token signing
- \`API_PORT\` - Backend server port (default: 3001)
- \`FRONTEND_URL\` - Frontend URL for CORS (default: http://localhost:3000)

## 🚀 Deployment

See [DEPLOYMENT_GUIDE.md](./DEPLOYMENT_GUIDE.md) for detailed deployment instructions.

### Quick Deploy Options

#### Vercel (Frontend + Serverless Backend)
\`\`\`bash
npx vercel --prod
\`\`\`

#### Railway (Full Stack)
\`\`\`bash
railway login
railway link
railway up
\`\`\`

#### Docker Production
\`\`\`bash
docker-compose -f docker-compose.prod.yml up -d
\`\`\`

## 📊 Monitoring & Analytics

${
  options.includeAnalytics
    ? `This application includes built-in analytics and monitoring:
- User behavior tracking
- Performance monitoring
- Error tracking and reporting
- Custom event tracking`
    : 'Analytics can be added by setting includeAnalytics option during generation.'
}

## 🧪 Testing

This project includes comprehensive testing:

- **Unit Tests**: Jest for both frontend and backend
- **Integration Tests**: API endpoint testing
- **End-to-End Tests**: Cypress for full application testing
- **Component Tests**: React Testing Library

\`\`\`bash
npm test                    # Run all tests
npm run test:coverage       # Run tests with coverage report
npm run test:watch          # Run tests in watch mode
\`\`\`

## 🤝 Contributing

Please read [CONTRIBUTING.md](./CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](./LICENSE) file for details.

## 🙏 Acknowledgments

- Built with [FlashFusion](https://flashfusion.dev) - AI-powered full-stack development platform
- Generated on ${timestamp}
- Stack: ${Object.values(app.stack).join(', ')}

${
  branding
    ? `
## 📞 Support

For support and questions:
- Email: ${branding.email || 'support@yourcompany.com'}
- Website: ${branding.website || 'https://yourcompany.com'}
`
    : ''
}

---

*Generated by FlashFusion 🚀 - The AI-powered full-stack development platform*
`;
}

/**
 * Generate deployment guide
 */
export function generateDeploymentGuide(app: GeneratedApp): string {
  return `# Deployment Guide

This guide covers deploying your ${app.name} application to various platforms.

## 🚀 Platform-Specific Deployments

### Vercel (Recommended for Frontend)

1. **Frontend Deployment**:
\`\`\`bash
cd frontend
npm install -g vercel
vercel login
vercel --prod
\`\`\`

2. **Environment Variables**:
- \`NEXT_PUBLIC_API_URL\` - Your backend API URL
- \`NEXT_PUBLIC_APP_ENV\` - production

### Railway (Full-Stack)

1. **Install Railway CLI**:
\`\`\`bash
npm install -g @railway/cli
railway login
\`\`\`

2. **Deploy**:
\`\`\`bash
railway link
railway up
\`\`\`

### Heroku

1. **Backend Deployment**:
\`\`\`bash
cd backend
heroku create ${app.name.toLowerCase().replace(/\s+/g, '-')}-api
git push heroku main
\`\`\`

2. **Frontend Deployment**:
\`\`\`bash
cd frontend
heroku create ${app.name.toLowerCase().replace(/\s+/g, '-')}
git push heroku main
\`\`\`

### Docker Production

1. **Build and Run**:
\`\`\`bash
docker-compose -f docker-compose.prod.yml build
docker-compose -f docker-compose.prod.yml up -d
\`\`\`

### AWS (Advanced)

1. **Using AWS App Runner**:
- Build Docker images
- Push to ECR
- Deploy with App Runner

2. **Using Elastic Beanstalk**:
- Package application
- Deploy to EB environment

## 🔒 Environment Variables

### Required for Production:
- \`NODE_ENV=production\`
- \`DATABASE_URL\` - Production database URL
- \`JWT_SECRET\` - Secure JWT secret
- \`CORS_ORIGIN\` - Frontend domain

### Optional:
- \`REDIS_URL\` - Redis cache URL
- \`SMTP_HOST\` - Email service
- \`STRIPE_SECRET_KEY\` - Payment processing

## 🏥 Health Checks

All platforms should monitor:
- \`GET /health\` - Application health
- \`GET /api/health\` - API health

## 🔄 CI/CD

GitHub Actions workflow is included for automatic deployments:

\`\`\`yaml
# See .github/workflows/deploy.yml
- Runs tests on push
- Builds Docker images
- Deploys to staging/production
\`\`\`

## 📊 Monitoring

Consider adding:
- Application Performance Monitoring (APM)
- Error tracking (Sentry)
- Log aggregation
- Database monitoring

## 🔧 Troubleshooting

### Common Issues:

1. **Build Failures**:
   - Check Node.js version compatibility
   - Verify environment variables
   - Review build logs

2. **Database Connection**:
   - Verify DATABASE_URL format
   - Check network connectivity
   - Ensure database is accessible

3. **CORS Errors**:
   - Update CORS_ORIGIN setting
   - Check frontend/backend URLs
   - Verify protocol (http/https)

For more help, check the platform-specific documentation or our [support resources](https://docs.flashfusion.dev).
`;
}

/**
 * Generate development guide
 */
export function generateDevelopmentGuide(app: GeneratedApp): string {
  return `# Development Guide

Welcome to the ${app.name} development environment!

## 🛠️ Setup Instructions

### 1. Prerequisites
- Node.js 18+
- npm 8+
- Git
- Docker (optional but recommended)

### 2. Installation
\`\`\`bash
# Clone the repository
git clone <your-repo-url>
cd ${app.name.toLowerCase().replace(/\s+/g, '-')}

# Install all dependencies
npm run setup

# Or install manually:
npm install
cd frontend && npm install
cd ../backend && npm install
\`\`\`

### 3. Environment Setup
\`\`\`bash
# Copy environment files
cp .env.example .env
cp frontend/.env.example frontend/.env.local
cp backend/.env.example backend/.env
\`\`\`

### 4. Database Setup
\`\`\`bash
# Using Docker (recommended)
docker-compose up -d postgres

# Or setup local PostgreSQL
createdb ${app.name.toLowerCase().replace(/\s+/g, '_')}
\`\`\`

### 5. Start Development
\`\`\`bash
# Start all services
npm run dev

# Or start individually
npm run dev:frontend  # http://localhost:3000
npm run dev:backend   # http://localhost:3001
\`\`\`

## 🏗️ Architecture Overview

### Frontend (${app.stack.frontend})
- **Location**: \`./frontend/\`
- **Port**: 3000
- **Key Technologies**: React, TypeScript, Tailwind CSS
- **State Management**: React Hooks + Context
- **Routing**: React Router v6

### Backend (${app.stack.backend})
- **Location**: \`./backend/\`
- **Port**: 3001
- **Key Technologies**: Node.js, Express, TypeScript
- **Database**: ${app.stack.database}
- **Authentication**: ${app.stack.auth}

## 📁 Directory Structure

\`\`\`
src/
├── components/          # Reusable UI components
│   ├── ui/             # Base UI components
│   ├── forms/          # Form components
│   └── layout/         # Layout components
├── pages/              # Application pages
├── hooks/              # Custom React hooks
├── services/           # API services and utilities
├── types/              # TypeScript type definitions
├── utils/              # Helper functions
└── styles/             # Global styles and themes
\`\`\`

## 🔧 Development Scripts

### Frontend Development
\`\`\`bash
cd frontend

npm run dev          # Start development server
npm run build        # Build for production
npm run lint         # Run ESLint
npm run test         # Run tests
npm run type-check   # TypeScript checking
\`\`\`

### Backend Development
\`\`\`bash
cd backend

npm run dev          # Start with nodemon
npm run build        # Compile TypeScript
npm run start        # Start production server
npm run test         # Run tests
npm run migrate      # Run database migrations
\`\`\`

## 🧪 Testing

### Frontend Testing
- **Framework**: Vitest + Testing Library
- **Location**: \`frontend/src/**/*.test.ts\`
- **Commands**:
  \`\`\`bash
  npm run test         # Run all tests
  npm run test:watch   # Watch mode
  npm run test:ui      # Visual test UI
  \`\`\`

### Backend Testing
- **Framework**: Jest + Supertest
- **Location**: \`backend/src/**/*.test.ts\`
- **Commands**:
  \`\`\`bash
  npm run test         # Run all tests
  npm run test:watch   # Watch mode
  npm run test:e2e     # End-to-end tests
  \`\`\`

## 🎨 Styling & Design

### Tailwind CSS
- Configuration: \`tailwind.config.js\`
- Custom classes: \`src/styles/globals.css\`
- Component styles: Co-located with components

### Design System
- Colors: Defined in Tailwind config
- Typography: Custom font stack
- Spacing: Consistent spacing scale
- Components: Reusable component library

## 🔌 API Development

### Adding New Endpoints
1. Create route handler in \`backend/src/routes/\`
2. Add route to main app in \`backend/src/app.ts\`
3. Update API types in \`shared/types/\`
4. Add frontend service method

### Example API Route:
\`\`\`typescript
// backend/src/routes/example.ts
import { Router } from 'express';

const router = Router();

router.get('/example', async (req, res) => {
  try {
    // Your logic here
    res.json({ message: 'Success' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default router;
\`\`\`

## 🗄️ Database Management

### Migrations
\`\`\`bash
# Create new migration
npm run migrate:create <name>

# Run migrations
npm run migrate:up

# Rollback migration
npm run migrate:down
\`\`\`

### Seeding
\`\`\`bash
# Seed development data
npm run seed

# Seed specific data
npm run seed:users
\`\`\`

## 🔧 Debugging

### Frontend Debugging
- Browser DevTools
- React DevTools extension
- Vite debug mode: \`DEBUG=vite:* npm run dev\`

### Backend Debugging
- VS Code debugger configuration included
- Debug mode: \`npm run dev:debug\`
- Database queries: Enable query logging

## 🚀 Building for Production

### Frontend Build
\`\`\`bash
cd frontend
npm run build        # Creates dist/ folder
npm run preview      # Preview production build
\`\`\`

### Backend Build
\`\`\`bash
cd backend
npm run build        # Compiles to dist/ folder
npm run start        # Runs compiled version
\`\`\`

## 📋 Code Standards

### TypeScript
- Strict mode enabled
- Explicit types preferred
- Use interfaces for object shapes
- Avoid \`any\` type

### React
- Functional components only
- Custom hooks for logic
- Props destructuring
- Proper key props for lists

### Node.js
- Async/await over promises
- Proper error handling
- Environment-based configuration
- Request validation

## 🤝 Contributing

1. Create feature branch: \`git checkout -b feature/new-feature\`
2. Follow code standards
3. Add tests for new features
4. Update documentation
5. Submit pull request

## 🆘 Troubleshooting

### Common Issues

1. **Port Already in Use**:
   \`\`\`bash
   lsof -ti:3000 | xargs kill -9  # Kill process on port 3000
   \`\`\`

2. **Node Modules Issues**:
   \`\`\`bash
   rm -rf node_modules package-lock.json
   npm install
   \`\`\`

3. **Database Connection**:
   - Check DATABASE_URL in .env
   - Ensure database is running
   - Verify credentials

### Getting Help
- Check the [documentation](https://docs.flashfusion.dev)
- Search existing [issues](https://github.com/your-repo/issues)
- Join our [Discord community](https://discord.gg/flashfusion)

Generated by FlashFusion 🚀
`;
}

/**
 * Generate architecture guide
 */
export function generateArchitectureGuide(app: GeneratedApp): string {
  return `# Architecture Guide

## Overview

${app.name} follows a modern three-tier architecture with clear separation of concerns:

## Frontend Layer
- **Technology**: ${app.stack.frontend}
- **State Management**: React Context + Hooks
- **Styling**: Tailwind CSS
- **Routing**: React Router v6
- **Build Tool**: Vite/Next.js

## Backend Layer
- **Technology**: ${app.stack.backend}
- **Framework**: Express.js
- **Authentication**: ${app.stack.auth}
- **API Style**: RESTful APIs with OpenAPI documentation

## Data Layer
- **Database**: ${app.stack.database}
- **ORM**: Prisma
- **Migrations**: Automated database migrations
- **Caching**: Redis (optional)

## Infrastructure
- **Containerization**: Docker + Docker Compose
- **Deployment**: ${app.stack.deployment}
- **CI/CD**: GitHub Actions
- **Monitoring**: Built-in health checks

## Security
- JWT-based authentication
- CORS configuration
- Input validation and sanitization
- SQL injection prevention
- XSS protection

## Performance
- Code splitting
- Lazy loading
- Database indexing
- Caching strategies
- CDN integration ready
`;
}

/**
 * Generate API documentation
 */
export function generateAPIDocumentation(app: GeneratedApp): string {
  return `# API Documentation

## Base URL
\`\`\`
http://localhost:3001/api
\`\`\`

## Authentication
All protected endpoints require a Bearer token in the Authorization header:
\`\`\`
Authorization: Bearer <your-jwt-token>
\`\`\`

## Endpoints

${app.endpoints
  .map(
    (endpoint) => `
### ${endpoint.method.toUpperCase()} ${endpoint.path}
${endpoint.description}

**Response:**
\`\`\`json
{
  "success": true,
  "data": {},
  "message": "Success"
}
\`\`\`
`
  )
  .join('\n')}

## Error Handling
All endpoints return consistent error responses:

\`\`\`json
{
  "success": false,
  "error": "Error message",
  "code": "ERROR_CODE"
}
\`\`\`

## Rate Limiting
- 100 requests per minute per IP
- 1000 requests per hour per authenticated user
`;
}

/**
 * Generate enhanced deployment guide
 */
export function generateEnhancedDeploymentGuide(_app: GeneratedApp): string {
  return `# Deployment Guide

## Production Deployment Options

### 1. Vercel (Recommended for Frontend)
\`\`\`bash
cd frontend
vercel --prod
\`\`\`

### 2. Railway (Full-Stack)
\`\`\`bash
railway login
railway link
railway up
\`\`\`

### 3. Docker Production
\`\`\`bash
docker-compose -f docker-compose.prod.yml up -d
\`\`\`

### 4. AWS Deployment
- Use AWS ECS for container orchestration
- RDS for database
- S3 + CloudFront for static assets

## Environment Configuration
Ensure these environment variables are set in production:
- \`NODE_ENV=production\`
- \`DATABASE_URL\` (production database)
- \`JWT_SECRET\` (strong secret)
- \`CORS_ORIGIN\` (your frontend domain)

## Health Checks
- Frontend: \`/\`
- Backend: \`/health\`
- Database: Connection test included

## Monitoring
- Application logs
- Error tracking
- Performance monitoring
- Database monitoring
`;
}

/**
 * Generate contributing guide
 */
export function generateContributingGuide(app: GeneratedApp): string {
  return `# Contributing to ${app.name}

## Development Setup

1. Fork the repository
2. Clone your fork: \`git clone <your-fork-url>\`
3. Install dependencies: \`npm run setup\`
4. Create a feature branch: \`git checkout -b feature/amazing-feature\`

## Development Guidelines

### Code Style
- Use TypeScript for all new code
- Follow ESLint and Prettier configurations
- Write meaningful commit messages
- Add tests for new features

### Testing
- Write unit tests for new functions
- Add integration tests for API endpoints
- Update E2E tests for UI changes
- Ensure test coverage stays above 80%

### Pull Request Process
1. Update documentation if needed
2. Add tests for your changes
3. Ensure all tests pass
4. Update CHANGELOG.md
5. Submit pull request with clear description

## Issue Reporting
Use GitHub issues with appropriate labels:
- \`bug\` for bugs
- \`enhancement\` for new features
- \`documentation\` for docs updates
`;
}
