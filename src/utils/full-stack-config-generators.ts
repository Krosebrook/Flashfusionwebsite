import type { AppStack } from '../types/full-stack-builder';

export function generateDatabaseSchema(database: string, features: string[]): string {
  if (database === 'postgresql') {
    return `-- PostgreSQL Database Schema
-- Generated by FlashFusion Full-Stack Builder

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255),
  email_verified BOOLEAN DEFAULT FALSE,
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

${features.includes('User Authentication & Authorization') ? `
-- Sessions table for authentication
CREATE TABLE sessions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  token VARCHAR(255) UNIQUE NOT NULL,
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Roles and permissions
CREATE TABLE roles (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(100) UNIQUE NOT NULL,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_roles (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  role_id UUID REFERENCES roles(id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, role_id)
);
` : ''}

${features.includes('File Upload & Storage') ? `
-- File uploads table
CREATE TABLE uploads (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  filename VARCHAR(255) NOT NULL,
  original_name VARCHAR(255) NOT NULL,
  mime_type VARCHAR(100) NOT NULL,
  size_bytes INTEGER NOT NULL,
  storage_path TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
` : ''}

${features.includes('Analytics & Reporting') ? `
-- Analytics events table
CREATE TABLE analytics_events (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  event_name VARCHAR(100) NOT NULL,
  event_data JSONB,
  session_id VARCHAR(255),
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
` : ''}

-- Create indexes for better performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_created_at ON users(created_at);

${features.includes('User Authentication & Authorization') ? `
CREATE INDEX idx_sessions_token ON sessions(token);
CREATE INDEX idx_sessions_user_id ON sessions(user_id);
CREATE INDEX idx_sessions_expires_at ON sessions(expires_at);
` : ''}

${features.includes('Analytics & Reporting') ? `
CREATE INDEX idx_analytics_events_user_id ON analytics_events(user_id);
CREATE INDEX idx_analytics_events_name ON analytics_events(event_name);
CREATE INDEX idx_analytics_events_created_at ON analytics_events(created_at);
` : ''}

-- Insert default roles
${features.includes('User Authentication & Authorization') ? `
INSERT INTO roles (name, description) VALUES 
  ('admin', 'Administrator with full access'),
  ('user', 'Standard user with limited access'),
  ('moderator', 'Moderator with content management access');
` : ''}`;
  }
  
  if (database === 'mongodb') {
    return `// MongoDB Database Schema
// Generated by FlashFusion Full-Stack Builder

// Users collection
db.users.createIndex({ "email": 1 }, { unique: true });
db.users.createIndex({ "createdAt": 1 });

// Example user document structure:
{
  "_id": ObjectId,
  "name": String,
  "email": String,
  "passwordHash": String,
  "emailVerified": Boolean,
  "avatarUrl": String,
  "roles": [String],
  "metadata": Object,
  "createdAt": Date,
  "updatedAt": Date
}

${features.includes('User Authentication & Authorization') ? `
// Sessions collection
db.sessions.createIndex({ "token": 1 }, { unique: true });
db.sessions.createIndex({ "userId": 1 });
db.sessions.createIndex({ "expiresAt": 1 }, { expireAfterSeconds: 0 });
` : ''}

${features.includes('Analytics & Reporting') ? `
// Analytics events collection
db.analyticsEvents.createIndex({ "userId": 1 });
db.analyticsEvents.createIndex({ "eventName": 1 });
db.analyticsEvents.createIndex({ "createdAt": 1 });
` : ''}`;
  }
  
  return `-- Database schema for ${database}
-- Configure your database schema here`;
}

export function generateInitialMigration(features: string[]): string {
  return `-- Initial Migration
-- Run this script to set up the database

BEGIN;

-- Core users table
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255) NOT NULL,
  password_hash VARCHAR(255),
  email_verified BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Update trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at 
  BEFORE UPDATE ON users 
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

${features.includes('User Authentication & Authorization') ? `
-- Authentication tables
CREATE TABLE IF NOT EXISTS sessions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  token VARCHAR(255) UNIQUE NOT NULL,
  expires_at TIMESTAMP NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);
` : ''}

COMMIT;

-- Seed data
INSERT INTO users (email, name, email_verified) VALUES 
  ('admin@example.com', 'Administrator', true),
  ('user@example.com', 'Test User', true)
ON CONFLICT (email) DO NOTHING;`;
}

export function generateDockerCompose(stack: AppStack, features: string[]): string {
  return `version: '3.8'

services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_APP_ENV=development
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:password@postgres:5432/myapp
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=myapp
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d myapp"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

${features.includes('Redis') || features.includes('Caching Layer') ? `
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network
` : ''}

${features.includes('Monitoring & Logging') ? `
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
` : ''}

volumes:
  postgres_data:
    driver: local
${features.includes('Redis') || features.includes('Caching Layer') ? '  redis_data:\n    driver: local' : ''}
${features.includes('Monitoring & Logging') ? '  grafana_data:\n    driver: local' : ''}

networks:
  app-network:
    driver: bridge`;
}

export function generateEnvExample(stack: AppStack): string {
  return `# Environment Configuration
# Copy this file to .env and update with your values

# Application
NODE_ENV=development
APP_NAME=MyApp
APP_URL=http://localhost:3000
API_URL=http://localhost:3001

# Database Configuration
DATABASE_URL=postgresql://user:password@localhost:5432/myapp
DB_HOST=localhost
DB_PORT=5432
DB_NAME=myapp
DB_USER=user
DB_PASSWORD=password

# Authentication & Security
JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_EXPIRES_IN=24h
BCRYPT_ROUNDS=12
SESSION_SECRET=your-session-secret

# NextAuth Configuration (if using NextAuth)
NEXTAUTH_SECRET=your-nextauth-secret
NEXTAUTH_URL=http://localhost:3000

# OAuth Providers
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret

# Email Service (SMTP)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
FROM_EMAIL=noreply@yourapp.com
FROM_NAME="Your App"

# File Storage (AWS S3 or similar)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
S3_BUCKET_NAME=your-s3-bucket
S3_REGION=us-east-1

# Redis (if using caching)
REDIS_URL=redis://localhost:6379
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Payment Processing (Stripe)
STRIPE_SECRET_KEY=sk_test_your-stripe-secret
STRIPE_PUBLISHABLE_KEY=pk_test_your-stripe-publishable
STRIPE_WEBHOOK_SECRET=whsec_your-webhook-secret

# External APIs
OPENAI_API_KEY=your-openai-api-key
ANTHROPIC_API_KEY=your-anthropic-api-key

# Monitoring & Analytics
SENTRY_DSN=your-sentry-dsn
GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
HOTJAR_ID=your-hotjar-id

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS Configuration
CORS_ORIGIN=http://localhost:3000
CORS_CREDENTIALS=true

# File Upload Limits
MAX_FILE_SIZE=10485760
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,application/pdf

# Feature Flags
ENABLE_REGISTRATION=true
ENABLE_EMAIL_VERIFICATION=true
ENABLE_RATE_LIMITING=true
ENABLE_ANALYTICS=true`;
}

export function generateProjectReadme(name: string, description: string, stack: AppStack, features: string[]): string {
  return `# ${name}

${description}

## 🚀 Tech Stack

- **Frontend**: ${stack.frontend}
- **Backend**: ${stack.backend}
- **Database**: ${stack.database}
- **Authentication**: ${stack.auth}
- **Deployment**: ${stack.deployment}

## ✨ Features

${features.map(feature => `- ✅ ${feature}`).join('\n')}

## 🛠️ Prerequisites

- **Node.js** 18+ 
- **Docker** and Docker Compose (recommended)
- **PostgreSQL** (if not using Docker)
- **Git**

## 🚀 Quick Start

### Option 1: Docker (Recommended)

1. **Clone and setup**
   \`\`\`bash
   git clone <your-repo>
   cd ${name.toLowerCase().replace(/\\s+/g, '-')}
   cp .env.example .env
   \`\`\`

2. **Configure environment**
   \`\`\`bash
   # Edit .env with your configuration
   nano .env
   \`\`\`

3. **Start with Docker**
   \`\`\`bash
   docker-compose up -d
   \`\`\`

4. **Access the application**
   - Frontend: http://localhost:3000
   - Backend API: http://localhost:3001
   - Database: localhost:5432

### Option 2: Local Development

1. **Setup Backend**
   \`\`\`bash
   cd backend
   npm install
   npm run dev
   \`\`\`

2. **Setup Frontend**
   \`\`\`bash
   cd frontend
   npm install
   npm run dev
   \`\`\`

3. **Setup Database**
   \`\`\`bash
   # Create database
   createdb ${name.toLowerCase().replace(/\\s+/g, '_')}
   
   # Run migrations
   npm run db:migrate
   \`\`\`

## 📁 Project Structure

\`\`\`
${name.toLowerCase().replace(/\\s+/g, '-')}/
├── frontend/              # ${stack.frontend} application
│   ├── pages/            # Application pages
│   ├── components/       # Reusable components
│   ├── lib/             # Utility functions
│   ├── styles/          # CSS/styling
│   └── public/          # Static assets
├── backend/              # ${stack.backend} API server
│   ├── src/
│   │   ├── routes/      # API routes
│   │   ├── middleware/  # Express middleware
│   │   ├── models/      # Database models
│   │   └── utils/       # Helper functions
│   └── tests/           # API tests
├── database/             # Database schema and migrations
├── docker-compose.yml    # Docker services configuration
├── .env.example         # Environment variables template
└── README.md           # This file
\`\`\`

## 🔧 Available Scripts

### Frontend Scripts
\`\`\`bash
npm run dev          # Start development server
npm run build        # Build for production
npm run start        # Start production server
npm run lint         # Run ESLint
npm run test         # Run tests
\`\`\`

### Backend Scripts
\`\`\`bash
npm run dev          # Start development server with hot reload
npm run build        # Compile TypeScript
npm run start        # Start production server
npm run test         # Run API tests
npm run db:migrate   # Run database migrations
npm run db:seed      # Seed database with sample data
\`\`\`

### Docker Scripts
\`\`\`bash
docker-compose up -d           # Start all services
docker-compose down            # Stop all services
docker-compose logs            # View logs
docker-compose exec backend   # Access backend container
\`\`\`

## 🌐 API Documentation

### Authentication Endpoints
- \`POST /api/auth/login\` - User login
- \`POST /api/auth/register\` - User registration
- \`POST /api/auth/logout\` - User logout
- \`GET /api/auth/me\` - Get current user

### User Endpoints
- \`GET /api/users\` - Get all users (admin)
- \`GET /api/users/:id\` - Get user by ID
- \`PUT /api/users/:id\` - Update user
- \`DELETE /api/users/:id\` - Delete user

### Health Check
- \`GET /api/health\` - Server health status

## 🔒 Environment Variables

Key environment variables you need to configure:

| Variable | Description | Required |
|----------|-------------|----------|
| \`DATABASE_URL\` | PostgreSQL connection string | ✅ |
| \`JWT_SECRET\` | Secret for JWT tokens | ✅ |
| \`NEXTAUTH_SECRET\` | NextAuth.js secret | ✅ |
| \`GOOGLE_CLIENT_ID\` | Google OAuth client ID | ⚠️ |
| \`SMTP_HOST\` | Email server host | ⚠️ |
| \`STRIPE_SECRET_KEY\` | Stripe API key | ⚠️ |

## 🧪 Testing

### Run Tests
\`\`\`bash
# Backend tests
cd backend && npm test

# Frontend tests
cd frontend && npm test

# E2E tests
npm run test:e2e
\`\`\`

### Test Coverage
\`\`\`bash
npm run test:coverage
\`\`\`

## 🚀 Deployment

### Docker Deployment
\`\`\`bash
# Build production images
docker-compose -f docker-compose.prod.yml build

# Deploy
docker-compose -f docker-compose.prod.yml up -d
\`\`\`

### Platform-Specific Deployment

#### Vercel (Frontend)
\`\`\`bash
cd frontend
vercel --prod
\`\`\`

#### Heroku (Backend)
\`\`\`bash
cd backend
heroku create your-app-backend
git push heroku main
\`\`\`

#### Railway (Full-Stack)
\`\`\`bash
railway login
railway link
railway up
\`\`\`

## 🔍 Monitoring

- **Health Check**: \`GET /api/health\`
- **Logs**: Check \`docker-compose logs\`
- **Database**: Monitor connection pool and queries
- **Performance**: Use built-in monitoring endpoints

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (\`git checkout -b feature/amazing-feature\`)
3. Commit changes (\`git commit -m 'Add amazing feature'\`)
4. Push to branch (\`git push origin feature/amazing-feature\`)
5. Open a Pull Request

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🆘 Support

- **Documentation**: Check this README and inline code comments
- **Issues**: Open a GitHub issue for bugs or feature requests
- **Community**: Join our Discord for discussions

## 🎯 Roadmap

- [ ] Add more authentication providers
- [ ] Implement real-time features with WebSockets
- [ ] Add comprehensive monitoring dashboard
- [ ] Mobile app development
- [ ] Advanced analytics and reporting

---

**Generated by FlashFusion AI Full-Stack Builder** 🚀

Built with ❤️ using the latest web technologies and best practices.`;
}

export function generateAPIEndpoints(features: string[]): Array<{method: string, path: string, description: string}> {
  const endpoints = [
    { method: 'GET', path: '/api/health', description: 'Health check endpoint' },
    { method: 'GET', path: '/api/users', description: 'Get all users' },
    { method: 'POST', path: '/api/users', description: 'Create new user' },
    { method: 'GET', path: '/api/users/:id', description: 'Get user by ID' },
    { method: 'PUT', path: '/api/users/:id', description: 'Update user' },
    { method: 'DELETE', path: '/api/users/:id', description: 'Delete user' }
  ];

  if (features.includes('User Authentication & Authorization')) {
    endpoints.push(
      { method: 'POST', path: '/api/auth/login', description: 'User login' },
      { method: 'POST', path: '/api/auth/register', description: 'User registration' },
      { method: 'POST', path: '/api/auth/logout', description: 'User logout' },
      { method: 'GET', path: '/api/auth/me', description: 'Get current user' },
      { method: 'POST', path: '/api/auth/refresh', description: 'Refresh access token' }
    );
  }

  if (features.includes('File Upload & Storage')) {
    endpoints.push(
      { method: 'POST', path: '/api/upload', description: 'Upload file' },
      { method: 'GET', path: '/api/files/:id', description: 'Get file by ID' },
      { method: 'DELETE', path: '/api/files/:id', description: 'Delete file' }
    );
  }

  if (features.includes('Payment Processing')) {
    endpoints.push(
      { method: 'POST', path: '/api/payments/create-intent', description: 'Create payment intent' },
      { method: 'POST', path: '/api/payments/confirm', description: 'Confirm payment' },
      { method: 'GET', path: '/api/payments/history', description: 'Get payment history' }
    );
  }

  if (features.includes('Analytics & Reporting')) {
    endpoints.push(
      { method: 'POST', path: '/api/analytics/event', description: 'Track analytics event' },
      { method: 'GET', path: '/api/analytics/dashboard', description: 'Get dashboard data' },
      { method: 'GET', path: '/api/analytics/reports', description: 'Generate reports' }
    );
  }

  return endpoints;
}

export function generateDeploymentConfig(stack: AppStack) {
  return {
    frontend: `Deployed on ${stack.deployment}`,
    backend: `API server on ${stack.deployment === 'vercel' ? 'Vercel Functions' : stack.deployment}`,
    database: `Hosted ${stack.database} instance`
  };
}